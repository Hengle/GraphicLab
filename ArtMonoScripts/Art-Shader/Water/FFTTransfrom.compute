#define PI		3.14159265358f
#define PI2		6.28318530717f


#pragma kernel FFT SIZE=128  CHANNEL=x TX=128 TY=1 
#pragma kernel FFT SIZE=128  CHANNEL=y TX=1 TY=128 
#pragma kernel FFT SIZE=256  CHANNEL=x TX=256 TY=1 
#pragma kernel FFT SIZE=256  CHANNEL=y TX=1 TY=256 
#pragma kernel FFT SIZE=512  CHANNEL=x TX=512 TY=1 
#pragma kernel FFT SIZE=512  CHANNEL=y TX=1 TY=512 
#pragma kernel FFT SIZE=1024  CHANNEL=x TX=1024 TY=1 
#pragma kernel FFT SIZE=1024  CHANNEL=y TX=1 TY=1024
#pragma kernel CShkt SIZE=512  CHANNEL=y TX=1 TY=512 
#pragma kernel CMDisp SIZE=512  CHANNEL=y TX=1 TY=512 
#pragma kernel CMNorm SIZE=512  CHANNEL=y TX=1 TY=512
#pragma kernel FFT_Debug SIZE=256  CHANNEL=x TX=256 TY=1 
#pragma kernel FFT_Debug SIZE=256  CHANNEL=y TX=1 TY=256

RWTexture2D<float4> hkt_y;
RWTexture2D<float4> hkt_x;
RWTexture2D<float4> hkt_z;

uint _Size;
float _G;
float _T;
Texture2D<float2> h0k;
Texture2D<float2> h0minusk;

float2 Cmul(float2 lhs,float2 rhs)
{
    float2 res;
    res.x=lhs.x*rhs.x-lhs.y*rhs.y;
    res.y=lhs.x*rhs.y+lhs.y*rhs.x;
    return res;
}
float2 Cadd(float2 lhs,float2 rhs)
{
    float2 res;
    res.x=lhs.x+rhs.x;
    res.y=lhs.y+rhs.y;
    return res;
}
float2 Cinv(float2 input)
{
    return float2(input.x,-input.y);
}

[numthreads(8,8,1)]
void CShkt(uint2 id: SV_DispatchThreadID)
{
    uint2 center=_Size.xx/2;
    uint2 coord=id.xy-center;
    float2 k=PI2*coord/_Size;
    float klength=length(k);
    if(klength<0.0001) klength=0.0001;

    float w=sqrt(_G*klength);
    
    float2 fourier_amp=h0k[id];
    float2 fourier_amp_conj=Cinv(h0minusk[id]);
    float cosinus=cos(w*_T);
    float sinus=sin(w*_T);

    float2 exp_iwt=float2(cosinus,sinus);
    float2 exp_iwt_inv=float2(cosinus,-sinus);
    float2 hkt_dy=Cadd(Cmul(fourier_amp,exp_iwt),Cmul(fourier_amp_conj,exp_iwt_inv));
    float2 dx=float2(0,-k.x/klength);
    float2 hkt_dx=Cmul(dx,hkt_dy);
    float2 dy=float2(0,-k.y/klength);
    float2 hkt_dz=Cmul(dy,hkt_dy);
    
    hkt_y[id.xy]=float4(hkt_dy,0,1);
    hkt_x[id.xy]=float4(hkt_dx,0,1);
    hkt_z[id.xy]=float4(hkt_dz,0,1);
}


RWTexture2D<float> output;
Texture2D<float2> Spetrum;
groupshared float2 cacheStructer[SIZE][2];

void Butterfly(uint channel, uint ns,int source)
{
    uint base=(channel/ns)*(ns/2);
    uint offs=channel%(ns/2);

    uint i0=base+offs;
    uint i1=i0+SIZE/2;

    float2 v0=cacheStructer[i0][source];
    float2 v1=cacheStructer[i1][source];

    float a=PI2*float(channel)/ns;
    float2 W=float2(cos(a),sin(a));

    cacheStructer[channel][source^1]=Cadd(v0,Cmul(W,v1));

}
void Butterfly_debug(uint channel, uint ns,int source)
{
    uint base=(channel/ns)*(ns/2);
    uint offs=channel%(ns/2);

    uint i0=base+offs;
    uint i1=i0+SIZE/2;

    float2 v0=cacheStructer[i0][source];
    float2 v1=cacheStructer[i1][source];

    float a=-PI2*float(channel)/ns;
    float2 W=float2(cos(a),sin(a));

    cacheStructer[channel][source^1]=Cadd(v0,Cmul(W,v1));

}
[numthreads(TX,TY,1)]
void FFT(uint2 id:SV_DispatchThreadID)
{
    uint x=id.CHANNEL;
    cacheStructer[x][0]=Spetrum[id];
    GroupMemoryBarrierWithGroupSync();
    int source=0;
    for(uint n=2;n<=SIZE;n*=2)
    {
        Butterfly(x,n,source);
        source^=1;
        GroupMemoryBarrierWithGroupSync();
    }
    float res=cacheStructer[x][source].x;
    output[id]=res;
}
RWTexture2D<float4> DispOut;
float strength;
Texture2D<float> dY;
Texture2D<float> dX;
Texture2D<float> dZ;
float3 sampleDisp(int2 uv)
{
    uv.x+=uv.x<0?_Size:(uv.x>=_Size?-_Size:0);
    uv.y+=uv.y<0?_Size:(uv.y>=_Size?-_Size:0);
    float3 res=float3(dX[uv],dY[uv],dZ[uv])*float3(strength,1,strength);
    return res;
}
[numthreads(8,8,1)]
void CMDisp(int2 id:SV_DispatchThreadID)
{
    DispOut[id]=float4(sampleDisp(id),1);
}
RWTexture2D<float4> NormOut;
float chopponess;
[numthreads(8,8,1)]
void CMNorm(int2 id:SV_DispatchThreadID)
{
    float3 dispL=sampleDisp(id-int2(1,0));
    float3 dispR=sampleDisp(id+int2(1,0));
    float3 dispT=sampleDisp(id-int2(0,1));
    float3 dispB=sampleDisp(id+int2(0,1));

    float3 diffH=dispR-dispL;
    float3 diffv=dispB-dispT;

    float2 Dx=diffH.xz*chopponess*_Size;
    float2 Dy=diffv.xz*chopponess*_Size;
    float J=(1+Dx.x)*(1+Dy.y)-Dx.y*Dy.x;
    float fold=max(1-saturate(J),0);
    NormOut[id]=float4(-diffH.y,-diffv.y,1,fold);
}
RWTexture2D<float2> debugOut;
Texture2D<float> space_d;
[numthreads(TX,TY,1)]
void FFT_Debug(uint2 id:SV_DispatchThreadID)
{
    uint x=id.CHANNEL;
    cacheStructer[x][0]=space_d[id];
    GroupMemoryBarrierWithGroupSync();
    int source=0;
    for(uint n=2;n<=SIZE;n*=2)
    {
        Butterfly_debug(x,n,source);
        source^=1;
        GroupMemoryBarrierWithGroupSync();
    }
    float res=cacheStructer[x][source].x;
    debugOut[id]=res;
}